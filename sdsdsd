class Node:
    value: any
    next_: 'Node'

    def __init__(self, value: any) -> None:
        self.value = value
        self.next_ = None


class LinkedList:
    head: Node
    tail: Node

    def __init__(self) -> None:
        self.head = None
        self.tail = None


    def push(self, value: any) -> None:
        node = Node(value)

        if self.head is None:
            self.head = node
            self.tail = node
        else:
            node.next_ = self.head
            self.head = node

class Stack:
    _storage: LinkedList

    def __init__(self) -> None:
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
            self.items.append(item)

    def pop(self) -> None:
        self.items.pop()

    def peek(self):
        return self.items[len(self.items) - 1]

    def size(self):
        return len(self.items)

stack = Stack()

print(stack.isEmpty())

stack.push(3)
stack.push(10)
stack.push(1)
print(stack.peek())

print(stack.pop())

print(stack.peek())

print(stack.size())
